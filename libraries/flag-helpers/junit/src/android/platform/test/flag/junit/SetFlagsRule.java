/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.platform.test.flag.junit;

import android.platform.test.flag.util.Flag;
import android.platform.test.flag.util.FlagSetException;

import org.junit.rules.TestRule;
import org.junit.runner.Description;
import org.junit.runners.model.Statement;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

/** A {@link TestRule} that helps to set flag values in unit test. */
public final class SetFlagsRule implements TestRule {
    private static final String FAKE_FEATURE_FLAGS_IMPL_CLASS_NAME = "FakeFeatureFlagsImpl";
    private static final String FEATURE_FLAGS_FIELD_NAME = "FEATURE_FLAGS";
    private static final String SET_FLAG_METHOD_NAME = "setFlag";
    private static final String RESET_ALL_METHOD_NAME = "resetAll";

    private final Map<Class<?>, Object> mFlagsToFlagsImpl = new HashMap<>();

    /**
     * Enables the given flags.
     *
     * @param fullFlagNames The name of the flags in the flag class with the format
     *     {packageName}.{flagName}
     */
    public void enableFlags(String... fullFlagNames) {
        for (String fullFlagName : fullFlagNames) {
            setFlagValue(fullFlagName, true);
        }
    }

    /**
     * Disables the given flags.
     *
     * @param fullFlagNames The name of the flags in the flag class with the format
     *     {packageName}.{flagName}
     */
    public void disableFlags(String... fullFlagNames) {
        for (String fullFlagName : fullFlagNames) {
            setFlagValue(fullFlagName, false);
        }
    }

    @Override
    public Statement apply(Statement base, Description description) {
        return new Statement() {
            @Override
            public void evaluate() throws Throwable {
                Throwable throwable = null;
                try {
                    base.evaluate();
                } catch (Throwable t) {
                    throwable = t;
                } finally {
                    try {
                        resetFlags();
                    } catch (Throwable t) {
                        if (throwable != null) {
                            t.addSuppressed(throwable);
                        }
                        throwable = t;
                    }
                }
                if (throwable != null) throw throwable;
            }
        };
    }

    private void setFlagValue(String fullFlagName, boolean value) {
        if (!fullFlagName.contains(".")) {
            throw new FlagSetException(
                    fullFlagName, "Flag name is not the expected format {packgeName}.{flagName}.");
        }
        Flag flag = Flag.createFlag(fullFlagName);
        String className = flag.flagsClassName();
        Object flagImplInstance = null;
        try {
            Class<?> flagsClass = Class.forName(className);
            flagImplInstance = mFlagsToFlagsImpl.get(flagsClass);
            if (flagImplInstance == null) {
                flagImplInstance = createFlagImplInstance(flagsClass, fullFlagName);
                mFlagsToFlagsImpl.put(flagsClass, flagImplInstance);
            }
            flagImplInstance
                    .getClass()
                    .getMethod(SET_FLAG_METHOD_NAME, String.class, boolean.class)
                    .invoke(flagImplInstance, fullFlagName, value);
        } catch (ClassNotFoundException e) {
            throw new FlagSetException(
                    fullFlagName,
                    String.format(
                            "Can not load the Flags class %s to set its values. Please check the "
                                    + "flag name and ensure that the aconfig auto generated "
                                    + "library is in the dependency.",
                            className));
        } catch (NoSuchMethodException e) {
            throw new FlagSetException(
                    fullFlagName,
                    String.format(
                            "Flag implementation %s are not generated by test mode",
                            flagImplInstance.getClass().getName()));
        } catch (ReflectiveOperationException e) {
            throw new FlagSetException(fullFlagName, e);
        } catch (IllegalArgumentException e) {
            throw new FlagSetException(
                    fullFlagName,
                    String.format(
                            "Flags class %s doesn't have flag %s"
                                    + "Flag name is expected in format {packgeName}.{flagName}.",
                            className, fullFlagName));
        }
    }

    private Object createFlagImplInstance(Class<?> flagsClass, String fullFlagName) {
        String packageName = flagsClass.getPackageName();
        String className = String.format("%s.%s", packageName, FAKE_FEATURE_FLAGS_IMPL_CLASS_NAME);
        Object flagImplInstance = null;

        try {
            Class<?> flagImplClass = Class.forName(className);
            flagImplInstance = flagImplClass.getConstructor().newInstance();
            Field featureFlagsField = flagsClass.getDeclaredField(FEATURE_FLAGS_FIELD_NAME);
            featureFlagsField.setAccessible(true);
            featureFlagsField.set(null, flagImplInstance);
        } catch (NoSuchFieldException e) {
            throw new FlagSetException(
                    fullFlagName,
                    String.format(
                            "Cannot set FakeFeatureFlagsImpl in Flag %s.", flagsClass.getName()));
        } catch (ReflectiveOperationException e) {
            throw new FlagSetException(fullFlagName, e);
        }

        return flagImplInstance;
    }

    private void resetFlags() {
        Object flagImplInstance = null;
        try {
            for (Object value : mFlagsToFlagsImpl.values()) {
                flagImplInstance = value;
                flagImplInstance
                        .getClass()
                        .getMethod(RESET_ALL_METHOD_NAME)
                        .invoke(flagImplInstance);
            }
        } catch (Exception e) {
            throw new FlagSetException(flagImplInstance.getClass().getName(), e);
        }
    }
}
